# Для начала работы с нашей библиотекой необходимо установить её в терминале через pip3 install vkbottle.
# Затем импортируем её в наш главный файл, как показано ниже.
# Также стоит произвести импорт файла settings.py, в который ранее мы внесли ключ API и ID нашего бота
# (пример файла так же лежит в проекте).

import settings
from vkbottle.bot import Bot, Message

# Подключение токена, прописанного в settings.
bot = Bot(token=settings.token)


# Затем для восприятия ботом каких-либо команд необходимо прописать их с последующим выполнением функции.

# В данном примере бот видит лишь ключевую фразу "Скажи привет",
# воспринимая её командой для выполнения ниженаписанной функции.
@bot.on.message(text=['Скажи привет'])
# Сама функция, выполняемая при получении ботом текста "Скажи привет",
# в качестве события бот принимает сообщения.
async def SayHi(event: Message):
    await event.answer(f"Привет!")


@bot.on.message(text=['Сложи <a> <b>'])   # Тэги a и b указаны через пробел, они выполняют роль контейнеров, которые передадут значения в сам код функции.
async def union(event: Message, a=None, b=None):
    try:   # Бот получает сообщение пользователя ТОЛЬКО В ТЕКСТОВОМ ФОРМАТЕ, поэтому его необходимо преобразовать в число.
        a = int(a)
        b = int(b)

    except ValueError:   # В данном случае представлена обработка исключений, о ней мы поговорим на следующем занятии.
        await event.answer(f"Вы ввели некорректно команду.\n Пример команды: 'Сложить 1 3'")
# Метод try except просто предотвратит ошибку, но не остановит код,
# поэтому нужно сделать повторную проверку правильности введённх значений.
    if type(a) == int and type(b) == int:
        await event.answer(f"Сумма равна {a + b}")


bot.run_forever()  # Необходимо для того, чтобы бот всегда ожидал какой-либо прописанной команды.
